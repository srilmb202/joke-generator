# -*- coding: utf-8 -*-
"""Copy of Joke Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KQzbo7X7mxNu4UTAomEsWMfUqhM-W3Go
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Define path for data file




---
"""

jokes_df = pd.read_csv('/content/sample_data/jokes_base_data.csv')

print(jokes_df.info())

print("Column Names:", jokes_df.columns)

"""Converting the data into readable list format

---


"""

jokes_list = jokes_df['Joke'].tolist()

print(jokes_list)

"""### **Tokenization** :  Defining `Tokenizer()` to convert the text into sequences

---


"""

tokenizer = Tokenizer()
tokenizer.fit_on_texts(jokes_list)
total_words = len(tokenizer.word_index) + 1

#converting text to sequence
input_sequences = []
for line in jokes_list:
    token_list = tokenizer.texts_to_sequences([line])[0]
    for i in range(1, len(token_list)):
        n_gram_sequence = token_list[:i+1]
        input_sequences.append(n_gram_sequence)

print(type(jokes_list))

jokes_list = pd.DataFrame(jokes_list)

"""### **Removing Stop Words**

---
"""

import nltk
nltk.download('stopwords')
def threeLetters(listOfTokens):
    threeLetterWord = []
    for token in listOfTokens:
        if len(token) <= 3 or len(token) >= 21:
            threeLetterWord.append(token)
    return threeLetterWord

from nltk.corpus import stopwords
def removeWords(listOfTokens):
  return [token for token in listOfTokens if token not in stopwords.words('english')]
jokes_df['Joke'] = jokes_df['Joke'].apply(removeWords)

jokes_df['Joke']

"""### **Stemming** : Normalizing words in the corpus with similar meanings.

---


"""

from nltk import SnowballStemmer
stemmer = SnowballStemmer('english')

def applyStemming(listOfTokens):
    return [stemmer.stem(token) for token in listOfTokens]

jokes_df['Joke'] = jokes_df['Joke'].apply(applyStemming)

jokes_list.head()

joke_lengths = jokes_df['Joke'].apply(lambda x: len(x) if isinstance(x, list) else len(x.split()))

plt.figure(figsize=(10, 6))
plt.hist(joke_lengths, bins=30)
plt.title('Distribution of Joke Lengths')
plt.xlabel('Number of Words')
plt.ylabel('Number of Jokes')
plt.show()

"""### **Padding Sequences** : It will pad any given sequences to the desired maximum length.

---


"""

max_sequence_length = max(len(seq) for seq in input_sequences)
padded_sequences = pad_sequences(input_sequences, maxlen=max_sequence_length, padding='pre')

x, y = padded_sequences[:, :-1], padded_sequences[:, -1]
y = tf.keras.utils.to_categorical(y, num_classes=total_words)

"""### **Creating the Model**

---


"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=total_words, output_dim=100, input_length=max_sequence_length-1),
    tf.keras.layers.LSTM(100),
    tf.keras.layers.Dense(total_words, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""### **Training the Model**

---


"""

model.fit(x, y, epochs=100, verbose=1)

from sklearn.manifold import TSNE
embeddings = model.layers[0].get_weights()[0]
tsne = TSNE(n_components=2, random_state=0)
words_compressed = tsne.fit_transform(embeddings)

plt.figure(figsize=(10, 8))
plt.scatter(words_compressed[:, 0], words_compressed[:, 1])
plt.title('t-SNE visualization of word embeddings')
plt.show()

"""### **Function to generate a Joke**

---


"""

def generate_joke(seed_text, next_words, model, max_sequence_len):
  for _ in range(next_words):
        token_list = tokenizer.texts_to_sequences([seed_text])[0]
        token_list = pad_sequences([token_list], maxlen=max_sequence_len-1, padding='pre')
        predicted_probs = model.predict(token_list, verbose=0)

        # Choose the word with the highest probability
        predicted_index = np.argmax(predicted_probs)

        output_word = ""
        for word, index in tokenizer.word_index.items():
            if index == predicted_index:
                output_word = word
                break
        seed_text += " " + output_word
  return seed_text

seed_text = "What do you call someone"
generated_joke = generate_joke(seed_text, next_words=5, model=model, max_sequence_len=max_sequence_length)
print("Generated Joke:", generated_joke)

